version: '3.5'

# this docker compose file creates the various services used across all dev platforms at plusForta, including
# * traefik
# * memcached
# * redis
# * mailhog
# * mysql
# * rabbitmq
services:
  memcached:
    container_name: memcached
    image: memcached:alpine
    networks:
      - internal
    restart: unless-stopped
  redis:
    container_name: redis
    image: redis
    networks:
      - internal
    ports:
      - "6380:6379"
    restart: unless-stopped
  mysql:
    container_name: db
    image: mysql:8
    networks:
      - internal
    ports:
      - "3316:3306"
    volumes:
      - dbdata:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
    restart: unless-stopped
  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    depends_on:
      - mysql
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.rule=Host("db.local.pfdev.de")
      - traefik.http.routers.adminer.entrypoints=websecure
      - traefik.http.routers.adminer.tls.certresolver=default
      - traefik.http.services.adminer.loadbalancer.server.port=8080
    networks:
      - web
      - internal
  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    depends_on:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.mailhog.rule=Host("mail.local.pfdev.de")
      - traefik.http.routers.mailhog.entrypoints=websecure
      - traefik.http.routers.mailhog.tls.certresolver=default
      - traefik.http.services.mailhog.loadbalancer.server.port=8025
    networks:
      - web
      - internal
    restart: unless-stopped
  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq-messenger
    container_name: rabbitmq
    depends_on:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.rabbitmq.rule=Host("mq.local.pfdev.de")
      - traefik.http.routers.rabbitmq.entrypoints=websecure
      - traefik.http.routers.rabbitmq.tls.certresolver=default
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
    networks:
      - web
      - internal
    volumes:
      - rabbithole:/var/lib/rabbitmq
    restart: unless-stopped
  traefik:
    container_name: traefik
    image: traefik:v2.1
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-file: 5
        max-size: 10m
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_KEY}
      AWS_REGION: "eu-central-1"
    labels:
      # create a router to catch all http traffic and redirect it to https
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker"
      - "traefik.http.routers.https-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.https-catchall.entrypoints=websecure"
      - "traefik.http.routers.https-catchall.middlewares=errorpage@docker"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    ports:
      - 80:80
      - 443:443
      - 8082:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/etc/traefik/traefik.yml
      - acmedata:/acme
    networks:
      - web
  errorPage:
    container_name: errorPage
    image: nginx
    restart: unless-stopped
    depends_on:
      - traefik
    volumes:
      - ./errorPages/html:/usr/share/nginx/html
      - ./errorPages/conf:/etc/nginx/conf.d
    labels:
      - traefik.enable=true
      - traefik.http.routers.errorpage.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.errorpage.priority=10
      - traefik.http.routers.errorpage.entrypoints=websecure
      - traefik.http.routers.errorpage.tls.certresolver=default
      - traefik.http.middlewares.errorpage.errors.status=404
      - traefik.http.middlewares.errorpage.errors.service=serviceError@docker
      - traefik.http.middlewares.errorpage.errors.query=/{status}.html
      - traefik.http.services.serviceError.loadbalancer.server.port=80
      # note to use this service in another-service when it's running, add the following label:
      # - traefik.http.routers.another-service.middlewares: serviceError@docker
      # honestly, you probably won't need to do that.
    networks:
      - web
volumes:
  acmedata: # storage for acme.json from traefik
  dbdata:  # contains mariadb database
  rabbithole: # contains rabbitmq exchanges, queues & messages
networks:
  web: # defines the network used to connect to traefik in another container
    name: web
  internal: # defines the network used to connect to all services
    name: internal
